//Walmart Problem 1

class Solution {
public:
    std::vector<int> largestDivisibleSubset(std::vector<int>& nums) {
        std::vector<int> result;
        if (nums.empty()) {
            return result;
        }

        std::sort(nums.begin(), nums.end());

        std::vector<std::vector<int>> dp(nums.size(), std::vector<int>());

        for (int i = 0; i < nums.size(); ++i) {
            std::vector<int> maxSubset;
            
            for (int k = 0; k < i; ++k) {
                if (nums[i] % nums[k] == 0 && maxSubset.size() < dp[k].size()) {
                    maxSubset = dp[k];
                }
            }

            dp[i] = maxSubset;
            dp[i].push_back(nums[i]);
        }

        for (const auto& subset : dp) {
            if (result.size() < subset.size()) {
                result = subset;
            }
        }

        return result;
    }
};
