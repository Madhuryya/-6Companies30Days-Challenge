//Microsoft Problem 14

class Solution {
public:
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        unordered_map<string, int> memo;
        return helper(price, special, needs, memo);
    }

    int helper(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, unordered_map<string, int>& memo) {
        string key = getKey(needs);

        if (memo.find(key) != memo.end()) {
            return memo[key];
        }

        int ans = 0;
        for (int i = 0; i < needs.size(); ++i) {
            ans += needs[i] * price[i];
        }

        for (const auto& offer : special) {
            bool valid = true;
            for (int i = 0; i < needs.size(); ++i) {
                if (needs[i] < offer[i]) {
                    valid = false;
                    break;
                }
            }

            if (valid) {
                vector<int> needs_copy = needs;
                int offer_price = offer.back();
                for (int i = 0; i < needs_copy.size(); ++i) {
                    needs_copy[i] -= offer[i];
                }

                int w_special = offer_price + helper(price, special, needs_copy, memo);
                ans = min(ans, w_special);
            }
        }

        memo[key] = ans; // Memoize the result
        return ans;
    }

    string getKey(const vector<int>& needs) {
        string key = "";
        for (int n : needs) {
            key += to_string(n) + ",";
        }
        return key;
    }
};
